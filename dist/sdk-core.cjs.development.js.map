{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/constants.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts"],"sourcesContent":["export enum QuantizeType {\r\n  QUANTIZE,\r\n  QUANTIZE_ETH,\r\n  DEQUANTIZE,\r\n  DEQUANTIZE_ETH\r\n}\r\n\r\nexport const FACTORY_ADDRESS = '0x1da48ae241B984C8BA795677616DCc13b93e4d60'\r\n\r\nexport const INIT_CODE_HASH = '0xfae899166b643caca96e31150882fba4e4f9081412d03b8c39cc844124b91e22'\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport default function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport validateAndParseAddress from '../utils/validateAndParseAddress'\r\nimport { ChainId } from '@uniswap/sdk-core'\r\nimport { Currency } from '@uniswap/sdk-core'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport { FACTORY_ADDRESS, INIT_CODE_HASH } from '../constants'\r\n\r\nexport const computeQuantizedAddress = ({\r\n  factoryAddress,\r\n  tokenAddress\r\n}: {\r\n  factoryAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address'], [tokenAddress])]),\r\n    INIT_CODE_HASH\r\n  )\r\n}\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class QuantizedToken extends Currency {\r\n  public readonly chainId: ChainId | number\r\n  public readonly address: string\r\n  public readonly qaddress: string\r\n\r\n  public static getQuantizedAddress(address: string): string {\r\n    return computeQuantizedAddress({ factoryAddress: FACTORY_ADDRESS, tokenAddress: address })\r\n  }\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n    this.qaddress = QuantizedToken.getQuantizedAddress(validateAndParseAddress(address))\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: QuantizedToken): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: QuantizedToken): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof QuantizedToken && currencyB instanceof QuantizedToken) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof QuantizedToken) {\r\n    return false\r\n  } else if (currencyB instanceof QuantizedToken) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH9: { [chainId in ChainId]: QuantizedToken } = {\r\n  [ChainId.MAINNET]: new QuantizedToken(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new QuantizedToken(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new QuantizedToken(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÖRLI]: new QuantizedToken(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new QuantizedToken(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\r\n}\r\n"],"names":["QuantizeType","FACTORY_ADDRESS","INIT_CODE_HASH","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","invariant","computeQuantizedAddress","factoryAddress","tokenAddress","getCreate2Address","keccak256","pack","QuantizedToken","chainId","decimals","symbol","name","qaddress","getQuantizedAddress","equals","other","sortsBefore","toLowerCase","Currency","currencyEquals","currencyA","currencyB","WETH9","ChainId","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN"],"mappings":"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"}