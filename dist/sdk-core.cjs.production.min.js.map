{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts"],"sourcesContent":["export enum QuantizeType {\r\n  QUANTIZE,\r\n  QUANTIZE_ETH,\r\n  DEQUANTIZE,\r\n  DEQUANTIZE_ETH\r\n}\r\n\r\nexport const FACTORY_ADDRESS = '0x1da48ae241B984C8BA795677616DCc13b93e4d60'\r\n\r\nexport const INIT_CODE_HASH = '0xfae899166b643caca96e31150882fba4e4f9081412d03b8c39cc844124b91e22'\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport default function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport validateAndParseAddress from '../utils/validateAndParseAddress'\r\nimport { ChainId } from '@uniswap/sdk-core'\r\nimport { Currency } from '@uniswap/sdk-core'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport { FACTORY_ADDRESS, INIT_CODE_HASH } from '../constants'\r\n\r\nexport const computeQuantizedAddress = ({\r\n  factoryAddress,\r\n  tokenAddress\r\n}: {\r\n  factoryAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address'], [tokenAddress])]),\r\n    INIT_CODE_HASH\r\n  )\r\n}\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class QuantizedToken extends Currency {\r\n  public readonly chainId: ChainId | number\r\n  public readonly address: string\r\n  public readonly qaddress: string\r\n\r\n  public static getQuantizedAddress(address: string): string {\r\n    return computeQuantizedAddress({ factoryAddress: FACTORY_ADDRESS, tokenAddress: address })\r\n  }\r\n\r\n  public constructor(chainId: ChainId | number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n    this.qaddress = QuantizedToken.getQuantizedAddress(validateAndParseAddress(address))\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: QuantizedToken): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: QuantizedToken): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof QuantizedToken && currencyB instanceof QuantizedToken) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof QuantizedToken) {\r\n    return false\r\n  } else if (currencyB instanceof QuantizedToken) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH9: { [chainId in ChainId]: QuantizedToken } = {\r\n  [ChainId.MAINNET]: new QuantizedToken(\r\n    ChainId.MAINNET,\r\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.ROPSTEN]: new QuantizedToken(\r\n    ChainId.ROPSTEN,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.RINKEBY]: new QuantizedToken(\r\n    ChainId.RINKEBY,\r\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n    18,\r\n    'WETH9',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.GÖRLI]: new QuantizedToken(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new QuantizedToken(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\r\n}\r\n"],"names":["QuantizeType","INIT_CODE_HASH","validateAndParseAddress","address","getAddress","error","invariant","computeQuantizedAddress","getCreate2Address","factoryAddress","keccak256","pack","tokenAddress","QuantizedToken","chainId","decimals","symbol","name","qaddress","getQuantizedAddress","equals","other","this","sortsBefore","toLowerCase","Currency","WETH9","ChainId","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","currencyA","currencyB"],"mappings":"8IAAYA,uKAAAA,EAAAA,uBAAAA,mDAEVA,mCACAA,+BACAA,6CAKWC,EAAiB,8ECJNC,EAAwBC,cAEjBC,aAAWD,GAGtC,MAAOE,GACPC,WCFSC,EAA0B,mBAO9BC,sBANPC,eAQEC,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,WAAY,GAP1CC,iBAQEX,IAOSY,iCASQC,EAA2BX,EAAiBY,EAAkBC,EAAiBC,8BAC1FF,EAAUC,EAAQC,UACnBH,QAAUA,IACVX,QAAUD,EAAwBC,KAClCe,SAAWL,EAAeM,oBAAoBjB,EAAwBC,+FAR/DgB,oBAAP,SAA2BhB,UACzBI,EAAwB,CAAEE,eFzBN,6CEyBuCG,aAAcT,gCAc3EiB,OAAA,SAAOC,UAERC,OAASD,GAGNC,KAAKR,UAAYO,EAAMP,SAAWQ,KAAKnB,UAAYkB,EAAMlB,WAS3DoB,YAAA,SAAYF,UACPC,KAAKR,UAAYO,EAAMP,SAAjCR,MACUgB,KAAKnB,UAAYkB,EAAMlB,SAAjCG,MACOgB,KAAKnB,QAAQqB,cAAgBH,EAAMlB,QAAQqB,kBArClBC,YAwDvBC,UACVC,UAAQC,SAAU,IAAIf,EACrBc,UAAQC,QACR,6CACA,GACA,QACA,mBAEDD,UAAQE,SAAU,IAAIhB,EACrBc,UAAQE,QACR,6CACA,GACA,QACA,mBAEDF,UAAQG,SAAU,IAAIjB,EACrBc,UAAQG,QACR,6CACA,GACA,QACA,mBAEDH,UAAQI,OAAQ,IAAIlB,EAAec,UAAQI,MAAO,6CAA8C,GAAI,QAAS,mBAC7GJ,UAAQK,OAAQ,IAAInB,EAAec,UAAQK,MAAO,6CAA8C,GAAI,QAAS,4CFlGjF,iLE+DAC,EAAqBC,UAC9CD,aAAqBpB,GAAkBqB,aAAqBrB,EACvDoB,EAAUb,OAAOc,KACfD,aAAqBpB,GAErBqB,aAAqBrB,GAGvBoB,IAAcC"}